{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMdiYmT3v2y70fTlMGt1iZf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/varun200418/varun200418/blob/main/tictac%20toe%20play%20board%20using%20python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t5y3OjIBrLtX"
      },
      "outputs": [],
      "source": [
        "def print_board(board):\n",
        "    print(\"Current state of the board:\\n\")\n",
        "    for i in range(0, 9):\n",
        "        if (i > 0) and (i % 3 == 0):\n",
        "            print(\"\\n\")\n",
        "        if board[i] == 0:\n",
        "            print(\"_\", end=\" \")\n",
        "        elif board[i] == 1:\n",
        "            print(\"X\", end=\" \")\n",
        "        elif board[i] == -1:\n",
        "            print(\"O\", end=\" \")\n",
        "    print(\"\\n\\n\")\n",
        "\n",
        "\n",
        "def user1_turn(board):\n",
        "    pos = input(\"Enter X position from [1, 2, 3, ..., 9]: \")\n",
        "    pos = int(pos)\n",
        "    if board[pos - 1] != 0:\n",
        "        print(\"Wrong move\")\n",
        "        exit(0)\n",
        "    board[pos - 1] = -1\n",
        "\n",
        "\n",
        "def user2_turn(board):\n",
        "    pos = input(\"Enter O position from [1, 2, 3, ..., 9]: \")\n",
        "    pos = int(pos)\n",
        "    if board[pos - 1] != 0:\n",
        "        print(\"Wrong move\")\n",
        "        exit(0)\n",
        "    board[pos - 1] = 1\n",
        "\n",
        "\n",
        "def analyze_board(board):\n",
        "    cb = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]\n",
        "\n",
        "    for i in range(0, 8):\n",
        "        if board[cb[i][0]] != 0 and board[cb[i][0]] == board[cb[i][1]] and board[cb[i][0]] == board[cb[i][2]]:\n",
        "            return board[cb[i][0]]\n",
        "\n",
        "    return 0\n",
        "\n",
        "\n",
        "def minmax(board, player):\n",
        "    x = analyze_board(board)\n",
        "    if x != 0:\n",
        "        return x * player\n",
        "    pos = -1\n",
        "    value = -2\n",
        "    for i in range(0, 9):\n",
        "        if board[i] == 0:\n",
        "            board[i] = player\n",
        "            score = -minmax(board, player * -1)\n",
        "            board[i] = 0\n",
        "            if score > value:\n",
        "                value = score\n",
        "                pos = i\n",
        "    if pos == -1:\n",
        "        return 0\n",
        "    return value\n",
        "\n",
        "\n",
        "def comp_turn(board):\n",
        "    pos = -1\n",
        "    value = -2\n",
        "    for i in range(0, 9):\n",
        "        if board[i] == 0:\n",
        "            board[i] = 1\n",
        "            score = -minmax(board, -1)\n",
        "            board[i] = 0\n",
        "            if score > value:\n",
        "                value = score\n",
        "                pos = i\n",
        "    board[pos] = 1\n",
        "\n",
        "\n",
        "def main():\n",
        "    choice = input(\"Enter 1 for single player, 2 for multiplayer: \")\n",
        "    choice = int(choice)\n",
        "    board = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n",
        "    if choice == 1:\n",
        "        print(\"Computer: O vs. you: X\")\n",
        "        player = input(\"Enter to play 1(st) or 2(nd): \")\n",
        "        player = int(player)\n",
        "        for i in range(0, 9):\n",
        "            if analyze_board(board) != 0:\n",
        "                break\n",
        "            if (i + player) % 2 == 0:\n",
        "                comp_turn(board)\n",
        "            else:\n",
        "                print_board(board)\n",
        "                user1_turn(board)\n",
        "    else:\n",
        "        for i in range(0, 9):\n",
        "            if analyze_board(board) != 0:\n",
        "                break\n",
        "            if i % 2 == 0:\n",
        "                comp_turn(board)\n",
        "            else:\n",
        "                print_board(board)\n",
        "                user2_turn(board)\n",
        "\n",
        "    x = analyze_board(board)\n",
        "    print_board(board)\n",
        "    if x == 0:\n",
        "        print(\"Draw!\")\n",
        "    elif x == -1:\n",
        "        print(\"Player X wins! Player O loses!\")\n",
        "    elif x == 1:\n",
        "        print(\"Player O wins! Player X loses!\")\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ]
}